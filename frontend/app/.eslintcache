[{"D:\\webdev projects\\reddit-clone\\frontend\\app\\src\\index.js":"1","D:\\webdev projects\\reddit-clone\\frontend\\app\\src\\reportWebVitals.js":"2","D:\\webdev projects\\reddit-clone\\frontend\\app\\src\\store.js":"3","D:\\webdev projects\\reddit-clone\\frontend\\app\\src\\App.js":"4","D:\\webdev projects\\reddit-clone\\frontend\\app\\src\\reducers\\postsReducer.js":"5","D:\\webdev projects\\reddit-clone\\frontend\\app\\src\\services\\posts.js":"6","D:\\webdev projects\\reddit-clone\\frontend\\app\\src\\components\\PostList.jsx":"7","D:\\webdev projects\\reddit-clone\\frontend\\app\\src\\components\\PostView.jsx":"8"},{"size":618,"mtime":1607753320384,"results":"9","hashOfConfig":"10"},{"size":362,"mtime":499162500000,"results":"11","hashOfConfig":"10"},{"size":398,"mtime":1607747103543,"results":"12","hashOfConfig":"10"},{"size":1521,"mtime":1608375872297,"results":"13","hashOfConfig":"10"},{"size":479,"mtime":1608375872307,"results":"14","hashOfConfig":"10"},{"size":234,"mtime":1608375872309,"results":"15","hashOfConfig":"10"},{"size":2957,"mtime":1608375872301,"results":"16","hashOfConfig":"10"},{"size":3329,"mtime":1608375872306,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"48lrnp",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"20"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"20"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"20"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"39"},"D:\\webdev projects\\reddit-clone\\frontend\\app\\src\\index.js",[],["40","41"],"D:\\webdev projects\\reddit-clone\\frontend\\app\\src\\reportWebVitals.js",[],"D:\\webdev projects\\reddit-clone\\frontend\\app\\src\\store.js",[],"D:\\webdev projects\\reddit-clone\\frontend\\app\\src\\App.js",["42","43","44","45"],"import React, { useState, useEffect } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\r\nimport styled from \"styled-components\";\r\n\r\nimport { initializePosts } from \"./reducers/postsReducer\";\r\n\r\nimport PostList from \"./components/PostList\";\r\nimport PostView from \"./components/PostView\";\r\n\r\nimport postService from \"./services/posts\";\r\n\r\nconst Wrapper = styled.div`\r\n  max-width: 1260px;\r\n  margin: auto;\r\n  background-color: white;\r\n  min-height: 100vh;\r\n  padding: 10px;\r\n`;\r\n\r\nconst Body = styled.div`\r\n  background-color: #eff0f2;\r\n  color: #333;\r\n  position: absolute;\r\n  right: 0;\r\n  left: 0;\r\n  top: 0;\r\n  min-height: 100vh;\r\n  font-family: \"Open Sans\", sans-serif;\r\n  font-weight: 400;\r\n`;\r\n\r\nconst Branding = styled.h1`\r\n  margin: 0;\r\n  padding: 10px 0;\r\n`;\r\n\r\nconst App = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(async () => {\r\n    dispatch(initializePosts());\r\n  }, []);\r\n\r\n  return (\r\n    <Router>\r\n      <Body>\r\n        <div className=\"App\">\r\n          <Wrapper>\r\n            <Link to=\"/\">\r\n              <Branding>Hello! ^_^</Branding>\r\n            </Link>\r\n\r\n            <Switch>\r\n              <Route exact path=\"/\">\r\n                <PostList />\r\n              </Route>\r\n              <Route path=\"/groups/:group/:id\">\r\n                <PostView />\r\n              </Route>\r\n            </Switch>\r\n          </Wrapper>\r\n        </div>\r\n      </Body>\r\n    </Router>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","D:\\webdev projects\\reddit-clone\\frontend\\app\\src\\reducers\\postsReducer.js",[],"D:\\webdev projects\\reddit-clone\\frontend\\app\\src\\services\\posts.js",["46","47"],"import axios from \"axios\";\r\nconst baseUrl = \"/posts\";\r\n\r\nconst getAll = async () => {\r\n  const req = await axios.get(\"http://localhost:3001/posts\");\r\n  console.log(req.data);\r\n  return req.data;\r\n};\r\n\r\nconst createPost = async post => {\r\n  const dummyDefaultData = {\r\n    ...post.data,\r\n    author: \"Admin\",\r\n    votes: 1,\r\n    followers: 0,\r\n    comments: [],\r\n    group: \"general\",\r\n    age: 60\r\n  };\r\n\r\n  const postInfo = { ...post, ...dummyDefaultData };\r\n\r\n  const req = await axios.post(\"http://localhost:3001/posts\", postInfo);\r\n  return req.data;\r\n};\r\n\r\nconst upvote = async post => {\r\n  const newPostData = { ...post, votes: post.votes + 1 };\r\n  const req = await axios.put(\r\n    `http://localhost:3001/posts/${post.id}`,\r\n    newPostData\r\n  );\r\n  return req.data;\r\n};\r\n\r\nconst downvote = async post => {\r\n  const newPostData = { ...post, votes: post.votes - 1 };\r\n  const req = await axios.put(\r\n    `http://localhost:3001/posts/${post.id}`,\r\n    newPostData\r\n  );\r\n  return req.data;\r\n};\r\n\r\nexport default {\r\n  getAll,\r\n  createPost,\r\n  upvote,\r\n  downvote\r\n};\r\n","D:\\webdev projects\\reddit-clone\\frontend\\app\\src\\components\\PostList.jsx",["48","49","50"],"import React from \"react\";\r\nimport { Link, useRouteMatch } from \"react-router-dom\";\r\nimport styled from \"styled-components\";\r\nimport moment from \"moment\";\r\n\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { upvote, downvote } from \"../reducers/postsReducer\";\r\n\r\nimport FontAwesome from \"react-fontawesome\";\r\n\r\nconst Post = styled.div`\r\n  border-bottom: 1px solid #ddd;\r\n  padding: 10px;\r\n  padding-left: 5px;\r\n  line-height: 1.5;\r\n  display: flex;\r\n  &:hover {\r\n    background-color: #f5f5f5;\r\n  }\r\n`;\r\n\r\nconst PostMain = styled.span`\r\n  .fa-history {\r\n    color: #999;\r\n  }\r\n  a {\r\n    color: #4385f5;\r\n    &:hover {\r\n      cursor: pointer;\r\n      text-decoration: underline;\r\n    }\r\n  }\r\n`;\r\n\r\nconst Title = styled.div`\r\n  color: #222;\r\n  font-weight: bold;\r\n  font-size: 24px;\r\n  display: inline-block;\r\n  &:hover {\r\n    cursor: pointer;\r\n    text-decoration: underline;\r\n  }\r\n`;\r\n\r\nconst Content = styled.div`\r\n  white-space: nowrap;\r\n  overflow: hidden;\r\n  text-overflow: ellipsis;\r\n  max-width: 80ch;\r\n`;\r\n\r\nconst VoteContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: space-between;\r\n  padding-top: 8px;\r\n  align-items: center;\r\n  margin-right: 20px;\r\n  color: #777;\r\n  font-size: 20px;\r\n  .upvote:hover,\r\n  .downvote:hover {\r\n    cursor: pointer;\r\n  }\r\n  .upvote:hover {\r\n    color: #4385f5;\r\n  }\r\n  .downvote:hover {\r\n    color: #ff3548;\r\n  }\r\n`;\r\n\r\nconst PostOptions = styled.div`\r\n  font-size: 14px;\r\n  color: #777;\r\n  margin-top: 10px;\r\n  & > span {\r\n    margin-right: 10px;\r\n    padding: 4px;\r\n    border-radius: 5px;\r\n    &:hover {\r\n      background-color: #eee;\r\n      cursor: pointer;\r\n    }\r\n  }\r\n  .favorite-active {\r\n    background-color: #eee;\r\n    color: #333;\r\n    font-weight: bold;\r\n    .fa-heart {\r\n      color: #fc74a4;\r\n    }\r\n  }\r\n`;\r\n\r\nconst PostList = ({ sortBy, searchBy, searchTerm }) => {\r\n  const match = useRouteMatch(\"/groups/:group\");\r\n  const dispatch = useDispatch();\r\n\r\n  let postsToDisplay = useSelector(state => {\r\n    if (match.params.group === \"all\") {\r\n      return state.posts;\r\n    } else {\r\n      return state.posts.filter(post => {\r\n        return post.group === match.params.group;\r\n      });\r\n    }\r\n  });\r\n\r\n  // Filter results if search is used\r\n  if (!!searchTerm) {\r\n    postsToDisplay = postsToDisplay.filter(post => {\r\n      if (searchBy === \"title\") {\r\n        return post.title.toLowerCase().includes(searchTerm.toLowerCase());\r\n      } else if (searchBy === \"content\") {\r\n        return post.content.toLowerCase().includes(searchTerm.toLowerCase());\r\n      }\r\n    });\r\n  }\r\n\r\n  postsToDisplay = postsToDisplay.sort((a, b) => {\r\n    switch (sortBy) {\r\n      case \"new\":\r\n        return a.age - b.age;\r\n      case \"top\":\r\n        return b.votes - a.votes;\r\n      case \"followers\":\r\n        return b.followers - a.followers;\r\n\r\n      case \"commentsAsc\":\r\n        return a.comments.length - b.comments.length;\r\n      case \"commentsDesc\":\r\n        return b.comments.length - a.comments.length;\r\n      default:\r\n        return null;\r\n    }\r\n  });\r\n\r\n  const handleUpvotePost = post => {\r\n    dispatch(upvote(post));\r\n  };\r\n\r\n  const handleDownvotePost = post => {\r\n    dispatch(downvote(post));\r\n  };\r\n\r\n  return postsToDisplay.map(post => (\r\n    <Post>\r\n      <VoteContainer>\r\n        <FontAwesome\r\n          name=\"plus-square\"\r\n          className=\"upvote\"\r\n          onClick={() => handleUpvotePost(post)}\r\n        />\r\n        <span>{post.votes <= 0 ? 0 : post.votes}</span>\r\n        <FontAwesome\r\n          name=\"minus-square\"\r\n          className=\"downvote\"\r\n          onClick={() => handleDownvotePost(post)}\r\n        />\r\n      </VoteContainer>\r\n      <div>\r\n        <PostMain>\r\n          <Link to={`/groups/${post.group}/${post.id}`}>\r\n            <Title>{post.title}</Title>{\" \"}\r\n          </Link>\r\n          posted <FontAwesome name=\"history\" className=\"fa-history\" />{\" \"}\r\n          {moment()\r\n            .seconds(post.age * -1)\r\n            .fromNow()}{\" \"}\r\n          in{\" \"}\r\n          <a href=\"#\">\r\n            <Link to={`/groups/${post.group}`}>\r\n              <strong>{post.group}</strong>\r\n            </Link>\r\n          </a>{\" \"}\r\n          by{\" \"}\r\n          <a href=\"#\">\r\n            <strong>{post.author}</strong>\r\n          </a>\r\n        </PostMain>\r\n\r\n        <Content>{post.content}</Content>\r\n        <PostOptions>\r\n          <span>\r\n            <FontAwesome name=\"comments\" /> {post.comments.length} comments\r\n          </span>\r\n          <span className={Math.random() > 0.5 ? \"favorite-active\" : \"\"}>\r\n            <FontAwesome name=\"heart\" className=\"fa-heart\" /> {post.followers}{\" \"}\r\n            followers\r\n          </span>\r\n        </PostOptions>\r\n      </div>\r\n    </Post>\r\n  ));\r\n};\r\n\r\nexport default PostList;\r\n","D:\\webdev projects\\reddit-clone\\frontend\\app\\src\\components\\PostView.jsx",["51","52"],"import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { useRouteMatch } from \"react-router-dom\";\r\n\r\nimport { upvote, downvote } from \"../reducers/postsReducer\";\r\n\r\nimport styled from \"styled-components\";\r\nimport FontAwesome from \"react-fontawesome\";\r\n\r\nconst Post = styled.div`\r\n  border-bottom: 1px solid #ddd;\r\n  padding: 10px;\r\n  line-height: 1.5;\r\n  display: flex;\r\n`;\r\n\r\nconst PostMain = styled.div`\r\n  margin-bottom: 15px;\r\n  .fa-history {\r\n    color: #999;\r\n  }\r\n  a {\r\n    color: #4385f5;\r\n    &:hover {\r\n      cursor: pointer;\r\n      text-decoration: underline;\r\n    }\r\n  }\r\n`;\r\n\r\nconst Title = styled.div`\r\n  color: #222;\r\n  font-weight: bold;\r\n  font-size: 1.5rem;\r\n  display: inline-block;\r\n  &:hover {\r\n    cursor: pointer;\r\n    text-decoration: underline;\r\n  }\r\n`;\r\n\r\nconst Content = styled.div`\r\n  max-width: 80ch;\r\n  border: 1px solid #777;\r\n  /* border-radius: 5px; */\r\n  background-color: #fafafa;\r\n  padding: 10px;\r\n`;\r\n\r\nconst VoteContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  padding-top: 8px;\r\n  align-items: center;\r\n  margin-right: 20px;\r\n  color: #777;\r\n  font-size: 1.25rem;\r\n  .upvote {\r\n    color: saturate(blue, 30%);\r\n  }\r\n  .upvote:hover,\r\n  .downvote:hover {\r\n    cursor: pointer;\r\n  }\r\n  .upvote:hover {\r\n    color: #4385f5;\r\n  }\r\n  .downvote:hover {\r\n    color: #ff3548;\r\n  }\r\n  & > * {\r\n    margin-bottom: 5.7px;\r\n  }\r\n`;\r\n\r\nconst PostOptions = styled.div`\r\n  color: #777;\r\n  margin-top: 10px;\r\n  & > span {\r\n    margin-right: 10px;\r\n    padding: 4px;\r\n    border-radius: 5px;\r\n  }\r\n  .favorite-active {\r\n    background-color: #eee;\r\n    color: #333;\r\n    font-weight: bold;\r\n    .fa-heart {\r\n      color: #fc74a4;\r\n    }\r\n  }\r\n`;\r\n\r\nconst FollowButton = styled.span`\r\n  border: 1px solid #fc74a4;\r\n  .fa-heart {\r\n    color: #fc74a4;\r\n  }\r\n`;\r\n\r\nconst PostView = () => {\r\n  const posts = useSelector(state => state.posts);\r\n  const dispatch = useDispatch();\r\n\r\n  const match = useRouteMatch(\"/groups/:group/:id\");\r\n  const post = match\r\n    ? posts.find(post => post.id.toString() === match.params.id.toString())\r\n    : null;\r\n\r\n  console.log(posts.find(post => post.id === match.params.id));\r\n\r\n  if (!post) {\r\n    return null;\r\n  }\r\n\r\n  const handleUpvotePost = post => {\r\n    dispatch(upvote(post));\r\n  };\r\n\r\n  const handleDownvotePost = post => {\r\n    dispatch(downvote(post));\r\n  };\r\n\r\n  return (\r\n    <Post>\r\n      <VoteContainer>\r\n        <FontAwesome\r\n          name=\"plus-square\"\r\n          className=\"upvote\"\r\n          onClick={() => handleUpvotePost(post)}\r\n        />\r\n        <span>{post.votes <= 0 ? 0 : post.votes}</span>\r\n        <FontAwesome\r\n          name=\"minus-square\"\r\n          className=\"downvote\"\r\n          onClick={() => handleDownvotePost(post)}\r\n        />\r\n      </VoteContainer>\r\n      <div>\r\n        <PostMain>\r\n          <Link to={`/groups/${post.group}/${post.id}`}>\r\n            <Title>{post.title}</Title>{\" \"}\r\n          </Link>\r\n          <div>\r\n            posted <FontAwesome name=\"history\" className=\"fa-history\" /> 10\r\n            hours ago in{\" \"}\r\n            <a href=\"#\">\r\n              <Link to={`/groups/${post.group}`}>\r\n                <strong>{post.group}</strong>\r\n              </Link>\r\n            </a>{\" \"}\r\n            by{\" \"}\r\n            <a href=\"#\">\r\n              <strong>{post.author}</strong>\r\n            </a>\r\n          </div>\r\n        </PostMain>\r\n\r\n        <Content>{post.content}</Content>\r\n        <PostOptions>\r\n          <span>\r\n            <FontAwesome name=\"comments\" /> {post.comments.length} comments\r\n          </span>\r\n          <FollowButton>\r\n            <FontAwesome name=\"heart\" className=\"fa-heart\" /> Follow\r\n          </FollowButton>\r\n        </PostOptions>\r\n      </div>\r\n    </Post>\r\n  );\r\n};\r\n\r\nexport default PostView;\r\n",["53","54"],{"ruleId":"55","replacedBy":"56"},{"ruleId":"57","replacedBy":"58"},{"ruleId":"59","severity":1,"message":"60","line":1,"column":17,"nodeType":"61","messageId":"62","endLine":1,"endColumn":25},{"ruleId":"59","severity":1,"message":"63","line":11,"column":8,"nodeType":"61","messageId":"62","endLine":11,"endColumn":19},{"ruleId":"64","severity":1,"message":"65","line":41,"column":13,"nodeType":"66","endLine":43,"endColumn":4},{"ruleId":"64","severity":1,"message":"67","line":43,"column":6,"nodeType":"68","endLine":43,"endColumn":8,"suggestions":"69"},{"ruleId":"59","severity":1,"message":"70","line":2,"column":7,"nodeType":"61","messageId":"62","endLine":2,"endColumn":14},{"ruleId":"71","severity":1,"message":"72","line":45,"column":1,"nodeType":"73","endLine":50,"endColumn":3},{"ruleId":"74","severity":1,"message":"75","line":113,"column":49,"nodeType":"66","messageId":"76","endLine":113,"endColumn":51},{"ruleId":"77","severity":1,"message":"78","line":173,"column":11,"nodeType":"79","endLine":173,"endColumn":23},{"ruleId":"77","severity":1,"message":"78","line":179,"column":11,"nodeType":"79","endLine":179,"endColumn":23},{"ruleId":"77","severity":1,"message":"78","line":148,"column":13,"nodeType":"79","endLine":148,"endColumn":25},{"ruleId":"77","severity":1,"message":"78","line":154,"column":13,"nodeType":"79","endLine":154,"endColumn":25},{"ruleId":"55","replacedBy":"80"},{"ruleId":"57","replacedBy":"81"},"no-native-reassign",["82"],"no-negated-in-lhs",["83"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'postService' is defined but never used.","react-hooks/exhaustive-deps","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["84"],"'baseUrl' is assigned a value but never used.","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","array-callback-return","Array.prototype.filter() expects a value to be returned at the end of arrow function.","expectedAtEnd","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement",["82"],["83"],"no-global-assign","no-unsafe-negation",{"desc":"85","fix":"86"},"Update the dependencies array to be: [dispatch]",{"range":"87","text":"88"},[983,985],"[dispatch]"]